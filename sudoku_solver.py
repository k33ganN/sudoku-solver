# -*- coding: utf-8 -*-
"""sudoku_solver.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mkr3FO13R7T51QJF8zKbAkwKcCVxixmE
"""

def print_board(board):
    for row in board:
        print(" ".join(str(num) if num != 0 else '.' for num in row))
    print()

def is_valid(board, row, col, num):
    if num in board[row]:
        return False
    if num in [board[i][col] for i in range(9)]:
        return False
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False
    return True

def solve(board):
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(board, row, col, num):
                        board[row][col] = num
                        if solve(board):
                            return True
                        board[row][col] = 0
                return False
    return True

def get_user_input():
    print("Enter your Sudoku puzzle row by row.")
    print("Use 0 for empty cells. Separate numbers with spaces.")
    board = []
    for i in range(9):
        while True:
            try:
                row = input(f"Row {i+1}: ").strip()
                row_nums = list(map(int, row.split()))
                if len(row_nums) != 9 or not all(0 <= num <= 9 for num in row_nums):
                    raise ValueError
                board.append(row_nums)
                break
            except ValueError:
                print("Invalid input. Please enter exactly 9 numbers between 0 and 9.")
    return board

board = get_user_input()

print("\nInput Puzzle:")
print_board(board)

if solve(board):
    print("Solved Puzzle:")
    print_board(board)
else:
    print("No solution exists.")